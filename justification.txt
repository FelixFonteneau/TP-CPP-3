Description de la répartition du graphe.


La classe Trajet est une classe abstraite:
	
	Deux attributs protégés :
		- villeDepart qui est un string qui correspond à la ville de départ du trajet.
		- villeFin qui est un string qui correspond à la ville d'arrivée du trajet.

	Trois méthodes : 
		-afficher qui affiche sur la sortie standard comment se déroule le trajet (ville de départ, ville d'arrivée, potentielles villes escales, et moyens de transports).
		- EnvoyerVille[Depart - Arrivee] qui retourne une chaine de charactère désignant la ville de depart/d'arrivée du trajet courant.
			

***

La classe TrajetSimple hérite de la classe Trajet :
	
	Un attribut privée :
		- moyenDeTransport qui est un string.
	
	Une méthode publique :
		- EnvoyerMoyenDeTransport qui renvoit une chaine de charactère désignant le moyen de transport du trajet simple.


***

La classe CollectionTrajet est composée de :

	Trois attributs privés :
		- trajets correspond à la liste de trajets. C'est un Tableau de pointeurs sur trajets constants. 
		- cardMax correspond à la taille maximale du tableau.
		- cardActuelle est un indice permetant de savoir jusqu'où le tableau est actuellement rempli.

	Trois méthodes publiques : 
		- Ajouter qui prend en paramètre la référence d'un trajet et l'ajoute au tableau trajets.
		- EnvoyerNiemeTrajet

***

La classe TrajetComposé hérite de la classe Trajet :

	Un attribut privée : 
		- trajetsComposant, qui est une CollectionTrajets.


***

La classe Catalogue est composée de : 

	Un attribut privé : 
		- trajetsDisponibles : CollectionTrajets

	Plusieurs méthodes:
		- AjouterTrajet qui prend en paramètre la référence d'un trajet et l'ajoute à la collection de trajet : trajetsComposant.
		- afficher (sans paramètre) qui va afficher la liste des tous le trajets sur la sortie standard.
		- rechercherParcours qui prend en paramètre deux string, le nom d'une ville de départ et d'une ville d'arrivée et affiche sur la sortie standard tous les trajets de la liste qui relient correctement la ville de départ et la ville d'arrivée.




Justification :

Nous avons choisi la répartition précédente car elle permet de relier les différents types de trajets au catalogue. Le point clef est la classe abstraite Trajet qui permet de pouvoir gerer une liste de trajets hétérogènes (simple ou complexes). En effet, chaque trajetSimple ou trajetComposé est un certain type de trajet. 

Chaque trajet possède une ville de départ, une ville d'arrivée qui sont ces attributs mais aussi, chaque trajet doit pouvoir être affiché.

La collection de trajet est notre structure de donnée permettant de pouvoir enregistrer les différents trajets sous forme d'un tableau de pointeurs constant de trajets constant. Cela permet de mieux gérer les trajets en mémoire. Cette structure de donnée est donc utilisée dans Catalogue mais aussi TrajetCompose. 

Un trajet simple va donc hériter des caractéristiques de la classe Trajet, mais va ajouter le moyen de transport, qui permet de relier la ville de départ à la ville d'arrivée.

Un trajet composé va aussi hériter des caractéristiques de la classe Trajet, mais en se distinguant d'un trajet simple de sa composition. En effet, un trajet composé va etre constitué de trajets simples et/ou de trajets composés. Il y aura donc une succession de trajets qui sont reliés par des villes étapes (pour chaque ville de fin de trajet composant différent de la ville d'arrivée, il existe une même ville de départ de trajet composant). 
Ceci explique la collection de trajet.

Le Catalogue permet donc d'intéragir avec l'utilisateur. Il a une Collection de différents trajets. On peut ajouter des trajet au catalogue grâce à une méthode. On peut afficher l'ensemble des trajets du catalogue avec une méthode. On peut aussi rechercher un parcours reliant une ville de départ et une ville d'arrivée avec une méthode.  










